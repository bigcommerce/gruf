# Copyright (c) 2017-present, BigCommerce Pty. Ltd. All rights reserved
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit
# persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the
# Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
# WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
# OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
module Gruf
  class Server
    class ServerAlreadyStartedError < StandardError
    end

    attr_reader port: ::Integer
    attr_reader options: ::Hash[::Symbol, ::Object]

    def initialize: (?::Hash[::Symbol, ::Object] opts) -> void
    def server: () -> ::GRPC::RpcServer
    def start!: () -> void
    def add_service: (Class klass) -> void
    def add_interceptor: (::Class klass, ?::Hash[::Symbol, ::Object] opts) -> void
    def insert_interceptor_before: (::Class before_class, ::Class interceptor_class, ?::Hash[::Symbol, ::Object] opts) -> void
    def insert_interceptor_after: (::Class after_class, ::Class interceptor_class, ?::Hash[::Symbol, ::Object] opts) -> void
    def list_interceptors: () -> ::Array[::Class]
    def remove_interceptor: (::Class klass) -> void
    def clear_interceptors: () -> void

    private

    def setup: () -> void
    def setup_signal_handlers: () -> void
    def load_controllers: () -> void
    def controllers_path: () -> ::String
    def ssl_credentials: () -> (:this_port_is_insecure | ::GRPC::Core::ServerCredentials)
    def update_proc_title: (::Symbol state) -> void
  end
end
